# 「オーバーライド」 = メソッド内の処理を上書きすること。
#                 　継承で行った「親子関係」であるクラスは、メソッドを上書きすることができる。
#                 　具体的な方法は、親クラスで定義されたメソッドを子クラスで同じ名前で定義します。
#                 　そうすると親クラスで定義されたメソッドではなく、子クラスで定義されたメソッドが実行される！これが"オーバーライド"だ！
#                 　注意点は親クラスのメソッドの中身が書き換えられるわけではなく、小クラスを呼び出した時のみ実行されること！！

#                 以上のオーバーライドは、親クラスのメソッドのみでは実現したい機能が満たせず"小クラスで機能を追加する場合"などに利用される。
# "オーバーライドのメリット"は以下のデメリットを解消できるものになっている。
# ①バラバラのメソッド名で似ている機能を作ってしまうと管理が大変。
# 重複する内容があると、メンテナンスが難しくなり、思わぬバグやトラブルを起こしてしまう可能性がある。
# これらを解消できるのがメリットや！！

# 以下例↓

class Car
    def run(distance)
        puts "車で#{distance}キロ走ります。"
    end
end

class Bus < Car
    def run(distance)
        puts "バスで#{distance}キロ走ります。"
    end
end

bus = Bus.new
bus.run(5)

# この場合、継承されてはいますがオーバーライドされているため小クラスのBusのrunメソッドが実行されます。
# 処理結果は
# バスで5キロ走ります。
# になります。

# また、親クラスでインスタンスを作成してみると親クラスのメソッドが実行されます。

car = Car.new
car.run(5)

# こちらの結果は
# 車で5キロ走ります。
# になります。

# ち、な、み、に
# オーバーライドしたBusクラスのメソッド内からCarクラスを呼び出すこともできる！
# 呼び出すには「super」を使うよ！


# 「super」は、小クラスのメソッド内で定義すると、親クラス内にある同じ名前のメソッドを呼び出すことができる。

# 書き方は以下の通り↓
class Car 
    def run(distance)
        puts "車で#{distance}キロ走ります。"
    end
end

class Bus < Car
    def run(distance)
        super     #←　コ↑コ↓
        puts "30人を乗せて走ってやがる！！"
    end
end

bus = Bus.new
bus.run(5)

# 書き方としてはメソッド内に「super」と定義するだけ。
# 「走る」という動作は、どの車にも共通している要素かと思う。
# だが、２行目の「30人を乗せて走ってやがる!!」というのはバスなどの大型車にしかない要素だと言える。
# このように、親クラスのメソッドには"ない要素"を追加したい時などに使う。

class Car
    def run(distance)
        puts "車で#{distance}キロ走ります。"
    end
end

class Truck < Car
    def run(distance)
        super
        puts "大きな荷物を乗せて走ります。"
    end
end

truck = Truck.new
truck.run(5)



            

